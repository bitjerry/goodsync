name: Build Python Package

on:
  workflow_dispatch:

  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  #  push:
  #    branches: [ main ]
  # Trigger the workflow on any pull request
#  pull_request:

jobs:

  #  pre-deploy:
  #    name: Pre-Deploy
  #    runs-on: ubuntu-latest
  #    if: github.event_name != 'pull_request'
  #    # needs: check
  #    # Run only on pushing a tag
  #    #    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
  #    steps:
  #      - name: Dummy
  #        run: |
  #          echo "Predeploy step"


  build-tarball:
    permissions:
      contents: read # to fetch code (actions/checkout)

    name: Tarball
    runs-on: ubuntu-latest
    #    needs: pre-deploy
    defaults:
      run:
        working-directory: ./python
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v5
      - name: Update pip, wheel, setuptools, build, twine
        run: |
          sudo apt-get update && sudo apt-get install libssl-dev
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "OPENSSL_LIBRARY_DIR=$(dpkg -L libssl-dev | grep -m 1 libcrypto | xargs dirname)" >> $GITHUB_ENV
          python -m pip install -U pip wheel setuptools build twine
      - name: Make sdist
        run: |
          python -m build --sdist
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./python/dist

  build-wheels:
    permissions:
      contents: read # to fetch code (actions/checkout)

    #    name: Build wheels on ${{ matrix.config.runs-on }}
    #    runs-on: ${{ matrix.config.runs-on }}-latest
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    #    needs: pre-deploy
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-13, macos-14 ]
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: x86
    #    defaults:
    #      run:
    #        working-directory: ./python
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      #      - name: Load CrossCompile Config
      #        run: |
      #          cd ./python &&
      #          echo "CROSS_COMPILE_JSON=$(jq -c . < CrossCompile.json)" >> $GITHUB_ENV
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Cache Openssl
        #        if: matrix.os == 'windows'
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ github.workspace }}/python/openssl/
          #            ${{ fromJson(env.CROSS_COMPILE).windows.x86_64 }}
          #            ${{ fromJson(env.CROSS_COMPILE).windows.x86_64 }}
          key: ${{ matrix.os }}${{ matrix.arch }}
      - name: Install Openssl On Windows
        if: matrix.os == 'windows-latest' && steps.cache.outputs.cache-hit != 'true'
        run: |
          choco upgrade --no-progress -y chocolatey -version 1.4.0 --allow-downgrade && 
          choco install --no-progress -y openssl && 
          cp -r "C:\\Program Files\\OpenSSL" ./python/openssl/x86_64 &&
          choco install --no-progress --allow-multiple -y --forceX86 --version 1.1.1.2100 openssl &&
          cp -r "C:\\Program Files (x86)\\OpenSSL-Win32" ./python/openssl/i686
      #      - name: Cache Linux Openssl
      #        if: matrix.os == 'ubuntu'
      #        uses: actions/cache@v4
      #        id: cache-ubuntu
      #        with:
      #          path: ./python/openssl
      #          key: ${{ runner.os }}
      #      - name: Install Openssl On Linux
      #        if: matrix.os == 'ubuntu-latest' && steps.cache.outputs.cache-hit != 'true'
      #        run: |
      #          sudo apt-get update &&
      #          sudo apt-get -yq --force-yes install gcc-multilib &&
      #          git clone --quiet --depth=1 --branch openssl-3.2 https://github.com/openssl/openssl &&
      #          cp -r ${{ github.workspace }}/openssl ${{ github.workspace }}/openssl_x86 &&
      #          cd ${{ github.workspace }}/openssl &&
      #          ./config -fPIC no-shared --prefix="${{ github.workspace }}/python/openssl/x86_64" --libdir="${{ github.workspace }}/python/openssl/x86_64/lib" &&
      #          make -s -j4 &&
      #          make install_sw &&
      #          make clean &&
      #          cd ${{ github.workspace }}/openssl_x86 &&
      #          setarch i386 ./config -fPIC no-shared -m32 --prefix="${{ github.workspace }}/python/openssl/i686" --libdir="${{ github.workspace }}/python/openssl/i686/lib" &&
      #          make -s -j4 &&
      #          make install_sw
      #      - name: Cache MacOS Openssl
      #        if: matrix.os == 'macos'
      #        uses: actions/cache@v4
      #        id: cache-ubuntu
      #        with:
      #          path: ./python/openssl
      #          key: ${{ runner.os }}
      - name: Setup latest Alpine Linux for ${{ matrix.arch }}
        if: matrix.os == 'ubuntu-latest' && steps.cache.outputs.cache-hit != 'true'
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.arch }}
          volumes: ${{ github.workspace }}/python:/python
      - name: Install Openssl On Linux for ${{ matrix.arch }}
        if: matrix.os == 'ubuntu-latest' && steps.cache.outputs.cache-hit != 'true'
        run: |
          apk add openssl-dev openssl-libs-static &&
          mkdir -p /python/openssl/${{ matrix.arch }}/include /python/openssl/${{ matrix.arch }}/lib &&
          cp -R /usr/lib/libcrypto.a /python/openssl/${{ matrix.arch }}/lib
          cp -R /usr/include/openssl /python/openssl/${{ matrix.arch }}/include/openssl
        shell: alpine.sh --root {0}

      - name: Install Openssl On MacOS
        if: contains(matrix.os, 'macos') && steps.cache.outputs.cache-hit != 'true'
        run: |
          brew install openssl &&
          sudo mkdir -p ${{ github.workspace }}/python/openssl/ &&
          sudo cp -RP $(brew --prefix openssl@3)/  ${{ github.workspace }}/python/openssl/
      - name: Update pip, wheel, setuptools, build, twine, cibuildwheel
        run: |
          python -m pip install -U pip wheel setuptools build twine cibuildwheel

      # Fucking cibuildwheel doesn't contain a real cross-compilation toolchain, at least Linux requires qemu

      - name: Build wheels
        run: |
          cd ./python && 
          python -m cibuildwheel --output-dir wheelhouse
        env:
          #          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2_24
          #          CIBW_MANYLINUX_I686_IMAGE: manylinux2_24
          #          CIBW_SKIP: "*-musllinux_*"
          #          CIBW_ARCHS_MACOS: native
          #          CIBW_ARCHS_WINDOWS: native
          #          CIBW_BEFORE_ALL_LINUX: >
          #            yum update -y &&
          #            yum install -y libgcc.i686 glibc-devel.i686 libstdc++-devel.i686 perl-IPC-Cmd &&
          #            cd / &&
          #            git clone --quiet --depth=1 https://github.com/openssl/openssl &&
          #            cp -r /openssl /openssl_x86 &&
          #            cd /openssl &&
          #            ./config -fPIC no-shared --prefix=/openssl/x86_64 --libdir=/openssl/x86_64/lib &&
          #            make -j1 install_sw &&
          #            cd /openssl_x86 &&
          #            setarch i386 ./config -fPIC no-shared -m32 --prefix=/openssl/i686 --libdir=/openssl/i686/lib &&
          #            make -j1 install_sw
          #          CIBW_BEFORE_ALL_MACOS: >
          #            cd /opt
          #            git clone --quiet --depth=1 https://github.com/openssl/openssl &&
          #            cd /opt/openssl &&
          #            ./config -fPIC no-shared --prefix=/opt/openssl_dev --libdir=/opt/openssl_dev/lib &&
          #            make -j1 install_sw
          CIBW_ENVIRONMENT_MACOS: SYSTEM_VERSION_COMPAT=0 _CROSS_COMPILE_FILE=./CrossCompile.json
          CIBW_ENVIRONMENT_WINDOWS: _CROSS_COMPILE_FILE=./CrossCompile.json
          CIBW_ENVIRONMENT_LINUX: _CROSS_COMPILE_FILE=./CrossCompile.json EXTRA_LINK_ARGS=-l:libcrypto.a
          CIBW_TEST_COMMAND: python {project}/tests/test.py
      #          CIBW_ENVIRONMENT_LINUX: >
      #            _CROSS_COMPILE=1
      #            OPENSSL_LIBRARIES_64=crypto
      #            OPENSSL_LIBRARIES_32=crypto
      #            OPENSSL_INCLUDE_64_DIR=/openssl_dev/include
      #            OPENSSL_INCLUDE_32_DIR=/openssl_dev_x86/include
      #            OPENSSL_LIBRARY_64_DIR=/openssl_dev/lib
      #            OPENSSL_LIBRARY_32_DIR=/openssl_dev_x86/lib
      #          CIBW_ENVIRONMENT_WINDOWS: >
      #            _CROSS_COMPILE=1
      #            OPENSSL_LIBRARIES_64="libcrypto64MT Crypt32 ws2_32 Advapi32 User32"
      #            OPENSSL_LIBRARIES_32="libcrypto32MT Crypt32 ws2_32 Advapi32 User32"
      #            OPENSSL_INCLUDE_64_DIR="./openssl/include"
      #            OPENSSL_INCLUDE_32_DIR="./openssl_x86/include"
      #            OPENSSL_LIBRARY_64_DIR="./openssl/lib/VC/static"
      #            OPENSSL_LIBRARY_32_DIR="./openssl_x86/lib/VC/static"
      #          CIBW_ENVIRONMENT_MACOS: >
      #            MACOSX_DEPLOYMENT_TARGET=10.9
      #            _CROSS_COMPILE=1
      #            OPENSSL_LIBRARIES_64=crypto
      #            OPENSSL_INCLUDE_64_DIR=/opt/openssl_dev/include
      #            OPENSSL_LIBRARY_64_DIR=/opt/openssl_dev/lib
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./python/wheelhouse/*.whl

  deploy:
    name: Deploy
    needs: [ build-tarball, build-wheels ]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Login
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Download distributions
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./python/dist
      - name: Collected dists
        run: |
          tree dist

        #      - name: Upload artifact signatures to GitHub Release
        # Confusingly, this action also supports updating releases, not
        # just creating them. This is what we want here, since we've manually
        # created the release above.
#        uses: softprops/action-gh-release@v2
#        with:
#          # dist/ contains the built packages, which smoketest-artifacts/
#          # contains the signatures and certificates.
#          files: ./dist/**
